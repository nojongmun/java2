package com.ict.day02;

public class Ex01 {
   // 클래스란 용도 ? 객체를 만들기 위한 정보의 집합 	
   // 객체 ? 	오브젝트, 현실세계를 표현 할 수 있는 모든 것
   // 클래스는 무엇들로 이루어 졌는가(3가지 쓰시오) ?
   //  1. 멤버필드(변수와 상수) : 상태값, 데이터
   //  2. 생성자 : 클래스를 객체로 생성할때 한번 사용, 멤버필드의 초기화(데이터값의 초기화)
   //  3. 멤버메소드 : 동작, 기능 
		
   	// 생성자 : 반환형이 없는 메소드와 같다.
	//        생성자는 클래스이름과 같다. 
	//        멤버필드의 초기화(데이터값의 초기화)
	
	// 오버로딩 (중복정의): 한 클래스 안에서 같은 이름의 메소드가 여러개 존재하는 것
	//                 (인자의 자료형이나 갯수가 달라야한다.)
	// 오버라이딩(재정의) :상속관계에서 부모의 메소드를 자식이 받아서 변경해서 사용하는 것.
	
	// 오버라이딩을 하지 못하게 하는 것 : 메소드의 반환형 앞에 final를 붙인다.
	
	// 추상 클래스 : 
	//  1. 추상메소드를 하나이상 가지고 있는 메소드
	//  2. 반드시 클래스와  추상메소드에게  abstract를 붙여야 한다.
	//  3. 일반멤버필드와 일반 멤버메소드들 가질 수 있다.(생성자도 존재한다.)
	
	 // 추상메소드 : body가 없는 메소드를 말함
	 //          기능을 구체화 하지 않은 메소드
	
	// 인터페이스 : 
	// - 상수(static final)와 추상메소드들로 이루어 졌다.
	// - 생성자도 없다.(객체 생성도 않됨)
	// - 서비스 목록과 같다.
	// - 유일하게 다중상속이 가능하다.
	
	// 하나의 데이터를 저장 : 변수
	// 같은 종류의 여러개의 데이터를 저장 : 배열
	// 여러가지 종류의 여러가지 데이터를 저장 : 클래스
	// 같은 클래스의 객체를 여러개 저장하는 것(모아서 관리하는 것) : 컬렉션(자료구조)
	
	// 스레드 처리 : Thread 클래스와 Runnable 인터페이스로  스레드 처리한다.
	//           start() 시작 => run()로 가야지만 스레드 처리라도 한다.
	// Thread 클래스는 start(), run() 둘 다 있다.
	// Runnable 인터페이스 run()만 있다.
	
	// FileInputStream : 비영어권은 안됨(숫자,영문자대문자,영문자소문자 가능)
	//  1byte 처리, 
	//  파일내용을 읽어
	//  read() : 한 글자 읽는다., 숫자로 나온다. char로 형변환 해야 된다.
	//           더이상 읽을 수 없을 때 -1 나온다.    
	//  read(byte[] b) : byte[] 단위로 읽는다.
	 
	// FileOutputStream :비영어권은 안됨(숫자,영문자대문자,영문자소문자 가능)
	//  1byte 처리,
	//  파일에 내용을 쓰기
	//  write(int b) : 아스키코드 숫자 하나만 파일에 쓴다.
	//  write(byte[] b) : 배열내용을 파일을 쓴다.
	
	// 객체 직렬화 와 객체 역직렬화  : ObjectStream  
	// ObjectSteram : ObjectOutputStream => writeObject() => 객체 직렬화 메소드
	//                ObjectInputStream => readObject() => 객체 역직렬화  메소드
}








